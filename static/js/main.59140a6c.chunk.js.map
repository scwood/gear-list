{"version":3,"sources":["components/SectionView.tsx","testData.tsx","components/GearList.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["SectionView","props","className","section","name","items","map","item","key","id","description","quantity","weight","unit","onClick","onAddItemRow","parsed","Papa","parse","header","testData","sections","sectionOrder","sectionNameToId","data","forEach","index","itemId","desc","qty","sectionId","sectionName","Category","Object","keys","length","push","itemIds","GearList","useState","state","setState","newItemId","String","Math","random","newItem","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.59140a6c.chunk.js","sourcesContent":["import React from \"react\";\nimport GearListSection from \"../dataObjects/GearListSection\";\nimport GearListItem from \"../dataObjects/GearListItem\";\n\ninterface SectionViewProps {\n  section: GearListSection;\n  items: GearListItem[];\n  onAddItemRow: (sectionId: string) => GearListItem;\n}\n\nconst SectionView: React.FC<SectionViewProps> = (props: SectionViewProps) => {\n  return (\n    <div className=\"fl w-100 mb4\">\n      <h1 className=\"f3 mb2 ml1\">{props.section.name}</h1>\n      {props.items.map(item => {\n        return (\n          <div className=\"fl pa1 w-100 bb b--black-30\" key={item.id}>\n            <div className=\"fl w-30\">{item.name}</div>\n            <div className=\"fl w-40\">{item.description}</div>\n            <div className=\"fl w-10\">{item.quantity}</div>\n            <div className=\"fl w-10\">{`${item.weight} ${item.unit}`}</div>\n          </div>\n        );\n      })}\n      <button\n        onClick={(): void => {\n          props.onAddItemRow(props.section.id);\n        }}\n      >\n        Add item\n      </button>\n    </div>\n  );\n};\n\nexport default SectionView;\n","import Papa from \"papaparse\";\nimport GearListSection from \"./dataObjects/GearListSection\";\nimport GearListItem from \"./dataObjects/GearListItem\";\n\nconst exportedLighterPackData = `Item Name,Category,desc,qty,weight,unit\nAtom Packs Atom+,Pack,pack,1,24,ounce\nTrash compactor bag,Pack,liner,1,0.7,ounce\nTarpTent Stratospire 2,Shelter,\"inner, fly, stuff sack, stakes\",1,44.6,ounce\nMonoprice Carbon Cork Trekking poles,Shelter,trekking poles / tent poles,1,15.2,ounce\nKatabatic Alsek,Sleep,quilt,1,24,ounce\nKelty Cosmic down 20,Sleep,sleeping bag,0,45,ounce\nThermarest Xlite,Sleep,sleeping pad,1,12,ounce\nAeros UL pillow,Sleep,pillow,1,2.9,ounce\nMountain Hardware Canyon Shirt,Clothes,button up shirt,1,0,ounce\nNike Pro Running Shorts,Clothes,shorts,1,5.1,ounce\nInjinji running socks,Clothes,socks,2,2,ounce\nAltra Lone Peak,Clothes,shoes,1,0,ounce\nAltra Gaitors,Clothes,gaitors,1,0,pound\nFrogg Toggs,Clothes,rain jacket,1,5.6,ounce\nAliexpress Down jacket,Clothes,down jacket,1,5,ounce\nDance pants,Clothes,wind pant,1,3.7,ounce\nGeneric Beanie,Clothes,warm hat,1,1.6,ounce\nCanon g7xii,Electronics,camera,1,11.2,ounce\niPhone 8 w/case,Electronics,\"phone, camera, gps\",1,7.9,ounce\nApple Earpods,Electronics,earbuds,1,0.5,ounce\nFoxelli headlamp,Electronics,headlamp,1,2.4,ounce\nAnker 10000,Electronics,powerbank,1,6.3,ounce\nLightning Cable,Electronics,to charge phone,1,0.7,ounce\nUSB2 cable,Electronics,to charge headlamp / powerbank / camera,1,0,ounce\nZiplock Bag,Electronics,to hold the stuff,1,0.2,ounce\nZpacks Food Bag,Food and Water,bag for food,1,3.3,ounce\nSea to summit long handled spoon,Food and Water,utensil,1,0.5,ounce\nTalenti Gelato Container,Food and Water,cold soaking container,1,0,pound\nSmartwater 1L,Food and Water,water bottle,2,37.5,gram\nKatadyn BeFree,Food and Water,water filter,1,2.2,ounce\nEVA foam pad,Misc,sit pad,1,1,ounce\nHillsound Crampon Ultra,Misc,microspikes,0,16,ounce\nBV500,Misc,bear can,0,41,ounce`;\n\nconst parsed: Papa.ParseResult = Papa.parse(exportedLighterPackData, {\n  header: true\n});\n\ninterface TestData {\n  items: { [id: string]: GearListItem };\n  sections: { [id: string]: GearListSection };\n  sectionOrder: string[];\n}\n\nconst testData: TestData = {\n  items: {},\n  sections: {},\n  sectionOrder: []\n};\n\nconst sectionNameToId: { [key: string]: string } = {};\n\nparsed.data.forEach((item, index) => {\n  const itemId = \"i\" + index;\n  testData.items[itemId] = {\n    id: itemId,\n    name: item[\"Item Name\"],\n    description: item.desc,\n    quantity: item.qty,\n    weight: item.weight,\n    unit: item.unit\n  };\n  const sectionName = item.Category;\n  let sectionId;\n  if (sectionName in sectionNameToId) {\n    sectionId = sectionNameToId[sectionName];\n  } else {\n    sectionId = \"s\" + Object.keys(sectionNameToId).length;\n    sectionNameToId[sectionName] = sectionId;\n    testData.sectionOrder.push(sectionId);\n    testData.sections[sectionId] = {\n      id: sectionId,\n      name: sectionName,\n      itemIds: []\n    };\n  }\n  testData.sections[sectionId].itemIds.push(itemId);\n});\n\nexport default testData;\n","import React, { useState } from \"react\";\nimport SectionView from \"./SectionView\";\nimport testData from \"../testData\";\nimport GearListItem from \"../dataObjects/GearListItem\";\n\nconst GearList: React.FC = () => {\n  const [state, setState] = useState({ ...testData });\n\n  function onAddItemRow(sectionId: string): GearListItem {\n    const newItemId = String(Math.random() * 100);\n    const newItem = {\n      id: newItemId,\n      name: \"\",\n      description: \"\",\n      quantity: 0,\n      weight: 0,\n      unit: \"ounce\"\n    };\n    const items = {\n      ...state.items,\n      [newItemId]: newItem\n    };\n\n    const sections = {\n      ...state.sections,\n      [sectionId]: {\n        ...state.sections[sectionId],\n        itemIds: [...state.sections[sectionId].itemIds, newItemId]\n      }\n    };\n\n    setState({ ...state, sections, items });\n    return newItem;\n  }\n\n  return (\n    <div>\n      {state.sectionOrder.map(sectionId => {\n        const section = state.sections[sectionId];\n        const items = section.itemIds.map(id => state.items[id]);\n        return (\n          <SectionView\n            onAddItemRow={onAddItemRow}\n            key={sectionId}\n            section={section}\n            items={items}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default GearList;\n","import React from \"react\";\nimport GearList from \"./GearList\";\n\nconst App: React.FC = () => {\n  return (\n    <section className=\"sans-serif mw8 center black-80 ph3\">\n      <GearList />\n    </section>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"tachyons/css/tachyons.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}